generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id           BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  firstName    String?   @db.VarChar(50)
  middleName   String?   @db.VarChar(50)
  lastName     String?   @db.VarChar(50)
  mobile       String?   @db.VarChar(15)
  email        String    @unique @db.VarChar(50)
  passwordHash String    @db.VarChar(32)
  registeredAt DateTime  @default(now()) @db.DateTime(0)
  lastLogin    DateTime? @db.DateTime(0)
  intro        String?   @db.TinyText
  profile      String?   @db.Text
  Post         Post[]
}

model Tag {
  id        BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  title     String     @db.VarChar(75)
  metaTitle String?    @db.VarChar(100)
  slug      String     @unique @db.VarChar(100)
  content   String?    @db.Text
  Post_Tag  Post_Tag[]
}

model Category {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  title         String          @db.VarChar(75)
  metaTitle     String?         @db.VarChar(100)
  slug          String          @unique @db.VarChar(100)
  content       String?         @db.Text
  parentId      BigInt?         @db.UnsignedBigInt
  category      Category?       @relation("CatToCat", fields: [parentId], references: [id])
  categories    Category[]      @relation("CatToCat")
  Post_Category Post_Category[]
}

model Post {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  title         String          @db.VarChar(75)
  metaTitle     String?         @db.VarChar(100)
  slug          String          @unique @db.VarChar(100)
  summary       String?         @db.TinyText
  published     Boolean         @db.TinyInt
  createdAt     DateTime        @default(now()) @db.DateTime(0)
  updatedAt     DateTime        @updatedAt @db.DateTime(0)
  publishedAt   DateTime?       @db.DateTime(0)
  content       String?         @db.Text
  authorId      BigInt          @db.UnsignedBigInt
  author        User            @relation(fields: [authorId], references: [id])
  post_metas    Post_Meta[]
  post_comments Post_Comment[]
  Post_Category Post_Category[]
  Post_Tag      Post_Tag[]
}

model Post_Category {
  postId     BigInt   @db.UnsignedBigInt
  post       Post     @relation(fields: [postId], references: [id])
  categoryId BigInt   @db.UnsignedBigInt
  category   Category @relation(fields: [categoryId], references: [id])

  @@id([postId, categoryId])
}

model Post_Tag {
  postId BigInt @db.UnsignedBigInt
  post   Post   @relation(fields: [postId], references: [id])
  tagId  BigInt @db.UnsignedBigInt
  tag    Tag    @relation(fields: [tagId], references: [id])

  @@id([postId, tagId])
}

model Post_Meta {
  id      BigInt  @id @default(autoincrement()) @db.UnsignedBigInt
  key     String  @db.VarChar(50)
  content String? @db.Text
  postId  BigInt  @db.UnsignedBigInt
  post    Post    @relation(fields: [postId], references: [id])
}

model Post_Comment {
  id           BigInt         @id @default(autoincrement()) @db.UnsignedBigInt
  postId       BigInt         @db.UnsignedBigInt
  post         Post           @relation(fields: [postId], references: [id])
  parentId     BigInt?        @db.UnsignedBigInt
  postComment  Post_Comment?  @relation("self_post_comment", fields: [parentId], references: [id])
  postComments Post_Comment[] @relation("self_post_comment")
  title        String         @db.VarChar(100)
  published    Boolean        @db.TinyInt
  createdAt    DateTime       @default(now()) @db.DateTime(0)
  publishedAt  DateTime?      @db.DateTime(0)
  content      String?        @db.Text
}
